import java.io.*;
import java.util.*;

public class SmartReminderApp {
    static List<Task> taskList = new ArrayList<>();
    static final String FILE_NAME = "tasks.txt";

    public static void main(String[] args) {
        loadTasks();
        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("\nSmart Reminder App");
            System.out.println("1. Add Reminder");
            System.out.println("2. View All Reminders");
            System.out.println("3. View Today's Tasks");
            System.out.println("4. Exit");
            System.out.print("Enter choice: ");
            int choice = sc.nextInt(); sc.nextLine();

            switch (choice) {
                case 1: addTask(sc); break;
                case 2: showAllTasks(); break;
                case 3: showTodayTasks(); break;
                case 4: saveTasks(); System.out.println("Goodbye!"); return;
                default: System.out.println("Invalid choice.");
            }
        }
    }

    static void addTask(Scanner sc) {
        System.out.print("Enter Task Title: ");
        String title = sc.nextLine();
        System.out.print("Enter Time (HH:mm): ");
        String time = sc.nextLine();
        Task task = new Task(title, time);
        taskList.add(task);
        System.out.println("Task added successfully!");
    }

    static void showAllTasks() {
        if (taskList.isEmpty()) {
            System.out.println("No tasks found.");
            return;
        }
        for (int i = 0; i < taskList.size(); i++) {
            Task t = taskList.get(i);
            System.out.printf("%d. %s at %s [%s]\n", i+1, t.title, t.time, t.completed ? "Done" : "Pending");
        }
    }

    static void showTodayTasks() {
        String currentTime = new java.text.SimpleDateFormat("HH:mm").format(new Date());
        System.out.println("Current Time: " + currentTime);
        for (Task t : taskList) {
            if (!t.completed && t.time.equals(currentTime)) {
                System.out.printf("Reminder: %s (Due now!)\n", t.title);
            }
        }
    }

    static void saveTasks() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME))) {
            for (Task t : taskList) {
                writer.write(t.toString());
                writer.newLine();
            }
        } catch (IOException e) {
            System.out.println("Error saving tasks: " + e.getMessage());
        }
    }

    static void loadTasks() {
        File file = new File(FILE_NAME);
        if (!file.exists()) return;
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_NAME))) {
            String line;
            while ((line = reader.readLine()) != null) {
                taskList.add(Task.fromString(line));
            }
        } catch (IOException e) {
            System.out.println("Error loading tasks: " + e.getMessage());
        }
    }
}
